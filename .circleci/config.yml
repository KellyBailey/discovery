# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
# TODO: Get rid of all this CircleCI caching in favor of extended Docker images
#
version: 2
jobs:
  ut-components:
    docker:
      - image: python:3.6-slim-stretch
        environment:
          LANG: C.UTF-8
          PYTHONUNBUFFERED: 1

      - image: postgres:9.4
        environment:
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: circleci
          POSTGRES_DB: circle-test

    working_directory: /var/local

    steps:
      - run:
          name: Install development tools
          command: |
            apt-get update
            apt-get install -y git gcc

      - checkout

      - run:
          name: Set CircleCI configuration
          command: |
            cp ./app/discovery/local_settings.circle.py ./app/discovery/local_settings.py

      - run:
          name: Install Angular CLI
          command: |
            ./scripts/setup-angular.sh /dev/stderr

      - run:
          name: Install requirements
          command: |
            pip install --no-cache-dir -r ./requirements.txt
            pip install --no-cache-dir -r ./requirements-dev.txt
            ./scripts/init-webserver.sh /dev/stderr

      - run:
          name: Run component tests
          no_output_timeout: 1h
          command: |
            ./run test --parallel=4 discovery categories vendors contracts

      - store_artifacts:
          path: logs
          destination: component-test-reports

  ut-core-api:
    docker:
      - image: python:3.6-slim-stretch
        environment:
          LANG: C.UTF-8
          PYTHONUNBUFFERED: 1

      - image: postgres:9.4
        environment:
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: circleci
          POSTGRES_DB: circle-test

    working_directory: /var/local

    steps:
      - run:
          name: Install development tools
          command: |
            apt-get update
            apt-get install -y git gcc

      - checkout

      - run:
          name: Set CircleCI configuration
          command: |
            cp ./app/discovery/local_settings.circle.py ./app/discovery/local_settings.py

      - run:
          name: Install Angular CLI
          command: |
            ./scripts/setup-angular.sh /dev/stderr

      - run:
          name: Install requirements
          command: |
            pip install --no-cache-dir -r ./requirements.txt
            pip install --no-cache-dir -r ./requirements-dev.txt
            ./scripts/init-webserver.sh /dev/stderr

      - run:
          name: Run core API tests
          no_output_timeout: 1h
          command: |
            ./run test api --tag=object
            ./run test api --tag=ordering
            ./run test api --tag=pagination
            ./run test api --tag=search
            ./run test api --tag=request
            ./run test api --tag=info

      - store_artifacts:
          path: logs
          destination: core-api-test-reports

  ut-api-fields:
    docker:
      - image: python:3.6-slim-stretch
        environment:
          LANG: C.UTF-8
          PYTHONUNBUFFERED: 1

      - image: postgres:9.4
        environment:
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: circleci
          POSTGRES_DB: circle-test

    working_directory: /var/local

    steps:
      - run:
          name: Install development tools
          command: |
            apt-get update
            apt-get install -y git gcc

      - checkout

      - run:
          name: Set CircleCI configuration
          command: |
            cp ./app/discovery/local_settings.circle.py ./app/discovery/local_settings.py

      - run:
          name: Install Angular CLI
          command: |
            ./scripts/setup-angular.sh /dev/stderr

      - run:
          name: Install requirements
          command: |
            pip install --no-cache-dir -r ./requirements.txt
            pip install --no-cache-dir -r ./requirements-dev.txt
            ./scripts/init-webserver.sh /dev/stderr

      - run:
          name: Run API field tests
          no_output_timeout: 1h
          command: |
            ./run test api --tag=field_test

      - store_artifacts:
          path: logs
          destination: api-field-test-reports

  ut-api-values:
    docker:
      - image: python:3.6-slim-stretch
        environment:
          LANG: C.UTF-8
          PYTHONUNBUFFERED: 1

      - image: postgres:9.4
        environment:
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: circleci
          POSTGRES_DB: circle-test

    working_directory: /var/local

    steps:
      - run:
          name: Install development tools
          command: |
            apt-get update
            apt-get install -y git gcc

      - checkout

      - run:
          name: Set CircleCI configuration
          command: |
            cp ./app/discovery/local_settings.circle.py ./app/discovery/local_settings.py

      - run:
          name: Install Angular CLI
          command: |
            ./scripts/setup-angular.sh /dev/stderr

      - run:
          name: Install requirements
          command: |
            pip install --no-cache-dir -r ./requirements.txt
            pip install --no-cache-dir -r ./requirements-dev.txt
            ./scripts/init-webserver.sh /dev/stderr

      - run:
          name: Run API values tests
          no_output_timeout: 1h
          command: |
            ./run test api --tag=values_test

      - store_artifacts:
          path: logs
          destination: api-values-test-reports

  ut-frontend:
    docker:
      - image: python:3.6-slim-stretch
        environment:
          LANG: C.UTF-8
          PYTHONUNBUFFERED: 1

      - image: postgres:9.4
        environment:
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: circleci
          POSTGRES_DB: circle-test

    working_directory: /var/local

    steps:
      - run:
          name: Install development tools
          command: |
            apt-get update
            apt-get install -y git gcc

      - checkout

      - run:
          name: Set CircleCI configuration
          command: |
            cp ./app/discovery/local_settings.circle.py ./app/discovery/local_settings.py

      - run:
          name: Install Angular CLI
          command: |
            ./scripts/setup-angular.sh /dev/stderr

      - run:
          name: Install requirements
          command: |
            pip install --no-cache-dir -r ./requirements.txt
            pip install --no-cache-dir -r ./requirements-dev.txt
            ./scripts/init-webserver.sh /dev/stderr

      - run:
          name: Run Angular tests
          no_output_timeout: 1h
          command: |
            ./scripts/test-frontend.sh /dev/stderr

      - store_artifacts:
          path: logs
          destination: angular-test-reports

  dep-dev:
    docker:
      - image: python:3.6-slim-stretch
        environment:
          LANG: C.UTF-8
          PYTHONUNBUFFERED: 1
          CF_LOGIN_URL: 'https://api.fr.cloud.gov'

    working_directory: /var/local

    steps:
      - run:
          name: Install development tools
          command: |
            apt-get update
            apt-get install -y git gcc

      - checkout

      - run:
          name: Set CircleCI configuration
          command: |
            cp ./app/discovery/local_settings.circle.py ./app/discovery/local_settings.py

      - run:
          name: Build static files
          command: |
            pip install --no-cache-dir -r ./requirements.txt
            pip install --no-cache-dir -r ./requirements-dev.txt
            ./scripts/setup-angular.sh /dev/stderr
            ./scripts/build-frontend.sh /dev/stderr
            ./scripts/init-webserver.sh /dev/stderr

      - run:
          name: Setup CloudFoundry client CLI
          command: |
            ./scripts/setup-cf.sh /dev/stderr

      - run:
          name: Deploy development applications
          command: |
            ./scripts/deploy-dev.sh

  dep-prod:
    docker:
      - image: python:3.6-slim-stretch
        environment:
          LANG: C.UTF-8
          PYTHONUNBUFFERED: 1
          CF_LOGIN_URL: 'https://api.fr.cloud.gov'

    working_directory: /var/local

    steps:
      - run:
          name: Install development tools
          command: |
            apt-get update
            apt-get install -y git gcc

      - checkout

      - run:
          name: Set CircleCI configuration
          command: |
            cp ./app/discovery/local_settings.circle.py ./app/discovery/local_settings.py

      - run:
          name: Build static files
          command: |
            pip install --no-cache-dir -r ./requirements.txt
            pip install --no-cache-dir -r ./requirements-dev.txt
            ./scripts/setup-angular.sh /dev/stderr
            ./scripts/build-frontend.sh /dev/stderr
            ./scripts/init-webserver.sh /dev/stderr

      - run:
          name: Setup CloudFoundry client CLI
          command: |
            ./scripts/setup-cf.sh /dev/stderr

      - run:
          name: Deploy production applications
          command: |
            ./scripts/deploy-prod.sh

  dep-docs:
    docker:
      - image: python:3.6-slim-stretch
        environment:
          LANG: C.UTF-8
          PYTHONUNBUFFERED: 1

    working_directory: /var/local

    steps:
      - run:
          name: Install development tools
          command: |
            apt-get update
            apt-get install -y git gcc make

      - checkout

      - run:
          name: Install requirements
          command: |
            pip install --no-cache-dir -r ./requirements.txt
            pip install --no-cache-dir -r ./requirements-dev.txt

      - run:
          name: Deploy documentation
          command: |
            git config --global user.name "CircleCI ( ${CIRCLE_USERNAME} )"
            git config --global user.email "${CIRCLE_USERNAME}@${CIRCLE_BRANCH}"
            ./scripts/deploy-docs.sh "${CIRCLE_BRANCH}"

      - store_artifacts:
          path: logs
          destination: docs-reports

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - ut-components
      - ut-core-api
      - ut-api-fields
      - ut-api-values
      - ut-frontend
      - dep-dev:
          requires:
            - ut-components
            - ut-core-api
            - ut-api-fields
            - ut-api-values
            - ut-frontend
          filters:
            branches:
              only: develop
      - dep-prod:
          requires:
            - ut-components
            - ut-core-api
            - ut-api-fields
            - ut-api-values
            - ut-frontend
          filters:
            branches:
              only: master
      - dep-docs:
          requires:
            - ut-components
          filters:
            branches:
              only:
                - master
                - docs
