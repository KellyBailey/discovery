# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
# TODO: Get rid of all this CircleCI caching in favor of extended Docker images
#
version: 2
jobs:
  unit-tests:
    docker:
      - image: debian:stretch-slim
        environment:
          PYTHONUNBUFFERED: 1

      - image: postgres:9.4
        environment:
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: circleci
          POSTGRES_DB: circle-test

    working_directory: /var/local

    steps:
      - run: echo 'export PATH=/venv/bin:$PATH' >> $BASH_ENV

      - run:
          name: Install Git
          command: |
            apt-get update
            apt-get install -y git

      - checkout

      - run:
          name: Install Python dependencies
          command: |
            scripts/setup-python.sh /dev/stderr

      - run:
          name: Set CircleCI configuration
          command: |
            cp app/discovery/local_settings.circle.py app/discovery/local_settings.py

      - run:
          name: Run unit tests
          no_output_timeout: 2h
          command: |
            source /venv/bin/activate
            scripts/init-webserver.sh /dev/stderr
            ./run test --parallel=5 discovery api categories vendors contracts

      - store_artifacts:
          path: logs
          destination: unit-test-reports

  acceptance-tests:
    docker:
      - image: debian:stretch-slim
        environment:
          PYTHONUNBUFFERED: 1

      - image: postgres:9.4
        environment:
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: circleci
          POSTGRES_DB: circle-test

    working_directory: /var/local

    steps:
      - run: echo 'export PATH=/venv/bin:$PATH' >> $BASH_ENV

      - run:
          name: Install Git
          command: |
            apt-get update
            apt-get install -y git

      - checkout

      - run:
          name: Install Python dependencies
          command: |
            scripts/setup-python.sh /dev/stderr

      - run:
          name: Install Chrome web driver
          command: |
            scripts/setup-chrome.sh /dev/stderr

      - run:
          name: Set CircleCI configuration
          command: |
            cp app/discovery/local_settings.circle.py app/discovery/local_settings.py

      - run:
          background: true
          command: Xvfb -ac :99 -screen 0 1280x1024x16 +extension RANDR > /dev/null 2>&1

      - run:
          name: Import fixtures and run test server
          background: true
          command: |
            source /venv/bin/activate
            scripts/init-db.sh /dev/stderr
            scripts/init-webserver.sh /dev/stderr
            scripts/load-fixtures.sh
            cd app
            waitress-serve --expose-tracebacks --port=8080 discovery.wsgi:application

      - run:
          name: Run acceptance tests
          command: |
            scripts/wait-for-it.sh --host="localhost" --port=8080 --timeout=300
            source /venv/bin/activate
            ./run test acceptance

      - store_artifacts:
          path: logs
          destination: acceptance-test-reports

  deploy-dev:
    docker:
      - image: debian:stretch-slim
        environment:
          CF_LOGIN_URL: 'https://api.fr.cloud.gov'

    working_directory: /var/local

    steps:
      - run:
          name: Install Git
          command: |
            apt-get update
            apt-get install -y git

      - checkout

      - run:
          name: Setup CloudFoundry client CLI
          command: |
            scripts/setup-cf.sh /dev/stderr

      - run:
          name: Deploy development applications
          command: |
            scripts/deploy-dev.sh

  deploy-prod:
    docker:
      - image: debian:stretch-slim
        environment:
          CF_LOGIN_URL: 'https://api.fr.cloud.gov'

    working_directory: /var/local

    steps:
      - run:
          name: Install Git
          command: |
            apt-get update
            apt-get install -y git

      - checkout

      - run:
          name: Setup CloudFoundry client CLI
          command: |
            scripts/setup-cf.sh /dev/stderr

      - run:
          name: Deploy production applications
          command: |
            scripts/deploy-prod.sh

  deploy-docs:
    docker:
      - image: debian:stretch-slim
        environment:
          PYTHONUNBUFFERED: 1

    working_directory: /var/local

    steps:
      - run: echo 'export PATH=/venv/bin:$PATH' >> $BASH_ENV

      - run:
          name: Install Git
          command: |
            apt-get update
            apt-get install -y git

      - checkout

      - run:
          name: Install Python dependencies
          command: |
            scripts/setup-python.sh /dev/stderr

      - run:
          name: Deploy documentation
          command: |
            source /venv/bin/activate
            git config --global user.name "CircleCI ( ${CIRCLE_USERNAME} )"
            git config --global user.email "${CIRCLE_USERNAME}@${CIRCLE_BRANCH}"
            scripts/deploy-docs.sh "${CIRCLE_BRANCH}"

      - store_artifacts:
          path: logs
          destination: docs-reports

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - unit-tests
      - acceptance-tests
      - deploy-dev:
          requires:
            - unit-tests
            - acceptance-tests
          filters:
            branches:
              only: develop
      - deploy-prod:
          requires:
            - unit-tests
            - acceptance-tests
          filters:
            branches:
              only: master
      - deploy-docs:
          requires:
            - unit-tests
            - acceptance-tests
          filters:
            branches:
              only:
                - master
                - docs
