schema_version: "3.0.0"
name: Configuration Management Policies for Discovery

references:
- name: Discovery Github Repository
  path: https://github.com/PSHCDevOps/discovery
  type: URL

- name: Discovery Circle CI
  path: https://circleci.com/gh/PSHCDevOps/discovery
  type: URL

- name: Discovery Documentation Site
  path: http://pshcdevops.github.io/discovery/
  type: URL


verifications:
- key: usgcb
  name: USGCB Checklists
  path: http://usgcb.nist.gov/usgcb_faq.html#usgcbfaq_usgcbfdcc
  type: URL

- key: scap
  name: SCAP Information
  path: http://scap.nist.gov/
  type: URL

- key: cloudgov
  name: Cloud.gov Hosting
  path: https://cloud.gov/docs/apps/production-ready
  type: URL

- key: circleci
  name: CircleCI - Documentation
  path: https://circleci.com/docs/2.0/
  type: URL

- key: django
  name: Django Documentation
  path: https://docs.djangoproject.com/en/1.8/
  type: URL

- key: vagrant
  name: Vagrant Documentation
  path: https://www.vagrantup.com/docs/
  type: URL

- key: docker
  name: Docker Documentation
  path: https://docs.docker.com/
  type: URL

- key: scripts
  name: Discovery Scripts
  path: https://github.com/PSHCDevOps/discovery/tree/master/scripts
  type: URL

- key: trello
  name: Discovery Trello Board
  path: https://trello.com/b/AEoWtET7/discovery-20
  type: URL


satisfies:
- standard_key: NIST-800-53
  control_key: CM-2 # Baseline Configuration
  implementation_status: complete
  covered_by:
    - verification_key: scripts
    - verification_key: cloudgov
    - verification_key: django
    - verification_key: circleci
  narrative:
    - text: |
        _Control:_ **The organization develops, documents, and maintains under configuration control, a current baseline configuration of the information system**

        The Discovery application uses configuration management and service automation extensively to provide a fully duplicatable environment between platforms, and ensure that we are able to consistently execute operations successfully across systems, developers, and maintainers.  The underlying philosophy is to create executable scripts for every operation and software setup / configuration to enhance productivity and efficient learning of the system.

        The Cloud.gov hosting environment manages all configurations as a services bound to applications that expose environment variables that are generated by the system.  The application infrastructure is built from a Python Cloud Foundry Buildpack, as well as Python Debian based containers.  The Django application is built from requirements files in the top level directory of the source code, and the operations are all defined as executable software, mostly executed for development purposes locally on a desktop/laptop or through CircleCI to automate tasks based on source updates, such as testing, documentation generation, and application deployment.

        At any given time, the application can be audited and recreated exactly as it exists at that point of time without manual administrative effort.  The Discovery project seeks to minimize, as much as possible, manual human centered tasks in the development process.


- standard_key: NIST-800-53
  control_key: CM-3 # Configuration Change Control
  implementation_status: complete
  covered_by:
    - verification_key: cloudgov
    - verification_key: django
    - verification_key: circleci
    - verification_key: trello
  narrative:
    - key: CM-3a
      text: |
        _Control:_ **The organization determines the types of changes to the information system that are configuration-controlled**

        The Discovery management team and maintainers have chosen a development strategy where all code updates and configurations are versioned, tested, and deployed through automation instead of human interaction.  This means all changes to the software system are configuration controlled.  Our policy is that there should be nothing that is not configuration controlled.

        There are certain configurations related to online services we use, such as GitHub, CircleCI, and Cloud.gov that require custom configurations, such as environment variables, that control access to other accounts and resources.  These are not versioned and must be inspected within the appropriate environment.  If old credentials are lost, new credentials are generated to replace them.  These service "variables" are the only configurations in the system, not versioned.  They are, however, auditable at any time.


    - key: CM-3b
      text: |
        _Control:_ **The organization reviews proposed configuration-controlled changes to the information system and approves or disapproves such changes with explicit consideration for security impact analyses**

        Security is a prime consideration with the underlying hosting environment and administrative system behind the Discovery application.  We only install what we need to serve the intended application purpose, and run the application in the moderately secure Cloud.gov hosting environment.  The security implications of any proposed changes are researched, reviewed, and discussed with the Discovery management team and possibly the Discovery Authorizing Official or other relevant security officials.

        The Discovery management team ensures that the Discovery application is compliant with all required FISMA standards and GSA security guidelines.  The management team all have administrative access to all hosting and monitoring environments, and recieve notifications when new updates are pushed to the Discovery code base.


    - key: CM-3c
      text: |
        _Control:_ **The organization documents configuration change decisions associated with the information system**

        The Discovery management team maintains a [Trello board](https://trello.com/b/AEoWtET7/discovery-20) and an application level issue queue that prioritizes all work conducted on the Discovery system.  Documents may be created for certain features or fixes that outline in various levels of detail configuration changes to the system, depending upon the nature of the change.  GitHub/Git maintains a log of all committers and the changes they have made so finding the source of a change is trivial.

        Changes made to configurations within a service boundary, such as Cloud.gov, CircleCI, or GitHub are not versioned and there is currently no way to see consistently who changed configurations and why.  However, discussions are conducted with Discovery management before any configuration change in a service environment.


    - key: CM-3d
      text: |
        _Control:_ **The organization implements approved configuration-controlled changes to the information system**

        Development of the Discovery application system occurs in an Agile fashion with a backlog of prioritized issues.  The Discovery management team can prioritize any configuration updates as needed, or in coordination with GSA security personnel.  Deployments to the online staging and production environments can happen anytime within a Sprint, allowing us to move extremely quickly to patch security vulnerabilities and other issues found during the course of normal operations of the Discovery application.


    - key: CM-3e
      text: |
        _Control:_ **The organization retains records of configuration-controlled changes to the information system for a period of not less than 1 year or in accordance with record retention policies and procedures; whichever is greater**

        The Discovery application system is version controlled with the Git revision control system, which carries with each project a complete history of the changes to the source code and related non secure configurations.  This Git commit log is available at anytime to anyone and can highlight the source of changes to the application.

        Version control is only helpful if configurations are versioned and manual entry of configurations and executed operations are avoided.  To help provide an optimum environment for the near complete versioning of the Discovery application, we follow the principle of automating everything possible.  Instead of documentation that tells someone how to do something with Discovery, we create scripts and other Python commands that execute sequences of known tasks with consistent naming conventions, and configuration parameters.

        The only configurations and data not versioned are secure connectivity information in staging and production environments, service parameters, and data loaded from external sources, like SAM and FPDS systems.  No history is stored for the changes of these variables for security reasons.  If connectivity is lost or we lose credentials, they are regenerated for security purposes.


    - key: CM-3f
      text: |
        _Control:_ **The organization audits and reviews activities associated with configuration-controlled changes to the information system**

        The Discovery application Git history and application logs are reviewed regularly to ensure there are no changes that would adversely affect the operation or integrity of the platform.  Adjustments to the configuration audit policy is reviewed and can be continuously updated and revised by the Discovery management team based on recommendations by GSA staff or current contractors working on the Discovery application.


    - key: CM-3g
      text: |
        _Control:_ **The organization coordinates and provides oversight for configuration change control activities through GSA S/SO or Contractor recommendation to be approved and accepted by the GSA AO.  Systems shall establish a central means (bulletin, status page, etc) of communicating major changes/development affecting services**

        The Discovery application currently has no central status reporting page or bulletin for communicating major changes or outages of the Discovery application.  The Discovery management team welcomes working with the GSA AO to implement a suitable interface in the future that can accellerate security related authorizations and future ATOs.


- standard_key: NIST-800-53
  control_key: CM-6 # Configuration Settings
  implementation_status: complete
  covered_by:
    - verification_key: usgcb
    - verification_key: scap
    - verification_key: trello
  narrative:
    - key: CM-6a
      text: |
        _Control:_ **The organization establishes and documents configuration settings for information technology products employed within the information system using GSA technical guidelines, NIST guidelines, Center for Internet Security guidelines (Level 1), or industry best practice guidelines in hardening their systems, as deemed appropriate by the GSA Authorizing Official. Implemented checklists must be integrated with Security Content Automation Protocol (SCAP) content (if available and/or to the greatest extent possible.)**

        The Discovery management team, GSA staff, and current contractors working on the Discovery application system attempt to ahere to all of the guidelines outlined in this control.  We are currently working on bringing our overall documentation up to speed with the guidelines and using technologies, such as Compliance Masonry (Open Control) to ensure we can leverage community efforts in this process.

        We welcome all feedback from the GSA information security professionals on their desired format and informational scope for auditing security compliance within the Discovery application.


    - key: CM-6b
      text: |
        _Control:_ **The organization implements the configuration settings**

        As outlined in CM-3d, the Discovery team maintains as many configuration settings as possible in version control and implements new configuration updates (secure and non-secure) in accordance with an Agile development process that allows for rapid release of software updates into the staging and production environments.


    - key: CM-6c
      text: |
        _Control:_ **The organization identifies, documents, and approves any deviations from established configuration settings for all information system components based on GSA S/SO or Contractor recommendation to be approved and accepted by the GSA AO**

        The Discovery management team, GSA staff, and current contractors working on the Discovery application system attempt to closely adhere to all established rules and guidelines put forth by the GSA Authorizing Official, and in the instances where we can not for some reason, we clearly document and discuss the deviation with the GSA AO to get advice and approval before actually deviating from the expectations of the system.

        In the event that we intend to implement a security guideline or policy, we may ask for additional time to prioritize the security recommendation with the limited development resources assigned to the project at a given time.  This process is conducted in an open environment with full visibility and collaboration with the GSA security staff and Authorizing Official.


    - key: CM-6d
      text: |
        _Control:_ **The organization monitors and controls changes to the configuration settings in accordance with organizational policies and procedures**

        The Discovery application relies on technologies and configuration management systems used by other online properties within the GSA family of applications, particularly 18F (who originally built this application).  All configuration changes to these systems are made in accordance with all applicable GSA policies and procedures.

        In the event that we are not following an established organizational policy or procedure, we will make prioritized security updates to the system and underlying management processes to ensure compliance upon request.


- standard_key: NIST-800-53
  control_key: CM-8 # Information System Component Inventory
  implementation_status: complete
  covered_by:
    - verification_key: cloudgov
    - verification_key: django
    - verification_key: circleci
    - verification_key: vagrant
    - verification_key: docker
  narrative:
    - key: CM-8a
      text: |
        _Control:_ **The organization develops and documents an inventory of information system components that; 1) Accurately reflects the current information system; 2) Includes all components within the authorization boundary of the information system; 3) Is at the level of granularity deemed necessary for tracking and reporting; and 4) Includes GSA S/SO or Contractor recommended information deemed necessary to ensure property accountability that must be approved and accepted by the GSA AO.  List may include hardware inventory specifications (manufacturer, type, model, serial number, physical location), software license information, information system/component owner, and for a networked component/device, the machine name and network address**

        With the Discovery application system everything needed to run the application is defined and included within the source code.  We build standardized development machines with Vagrant, run standardized application runtime environments with Docker locally and with CircleCI, utilize community developed Python buildpacks for Cloud.gov, and define all versioned application dependencies in top level requirements files, that can be easily audited.  The goal is to spin up the Discovery application cluster with a single command.  This means everything needed to run Discovery is documented in executable form in the source code.

        The Discovery application is layered like an onion.  At the bottom we have AWS (covered in AWS FedRAMP authorization), that houses Cloud.gov (covered in FedRAMP JAB authorization), that uses standard Python environments, and service architecture.  In the future we will move to using Docker images on Cloud.gov instead of buildpacks to ensure parity between local development environments, CI/CD environments, and remote hosting environments.

        All versions of required software, with the exception of some development tools and Docker are pegged at a specific version that has been tested and is running in the production or staging environments.  Since the Discovery application is entirely virtual, there is no hardware inventory.


    - key: CM-8b
      text: |
        _Control:_ **The organization reviews and updates the information system component inventory after every change**

        The Discovery application Git commit log maintains a record of every component change to the system and is reviewed before every merge into our development and production mainline branches.  All application changes are deployed through CircleCI CI/CD service so all component changes must flow through the base develop and master braches before being served to the public.  This history is auditable and it is easy to see who updated components, and when.
